import streamlit as st
import pydeck as pdk
import google.generativeai as genai
from datetime import date

# -----------------------------------------------------------
# 🧩 Streamlit Page Configuration
# -----------------------------------------------------------
st.set_page_config(page_title="Student Travel Planner", page_icon="🧳", layout="wide")

# -----------------------------------------------------------
# 🎛️ Sidebar: Profile & Settings
# -----------------------------------------------------------
st.sidebar.header("👤 Profile Settings")

user_name = st.sidebar.text_input("Name", placeholder="Enter your name")
user_email = st.sidebar.text_input("Email", placeholder="Enter your email")
user_age = st.sidebar.number_input("Age", min_value=16, max_value=60, step=1)
travel_pref = st.sidebar.selectbox(
    "Preferred Travel Type",
    ["Adventure", "Relaxation", "Cultural", "Nature", "Foodie", "Mixed"]
)



st.sidebar.markdown("---")
st.sidebar.subheader("⚙️ App Settings")

api_key = st.sidebar.text_input("🔑 Enter your Gemini API Key", type="password")

if st.sidebar.button("💾 Save Settings"):
    st.sidebar.success(f"Settings saved for {user_name or 'User'}!")

# -----------------------------------------------------------
# 🌈 Apply Dark or Light Mode Theme
# -----------------------------------------------------------


# -----------------------------------------------------------
# 🌍 Main App
# -----------------------------------------------------------
st.title("🧭 Student Travel Planner")
st.write("Plan your next adventure with AI — enter your preferences and get a smart travel itinerary!")

if api_key:
    genai.configure(api_key=api_key)
else:
    st.warning("Please enter your Gemini API key from the sidebar to use the AI itinerary generator.")

# -----------------------------------------------------------
# 🧍 User Inputs
# -----------------------------------------------------------
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("**📍 Destination**")
    destination_option = st.selectbox(
        "Choose from popular destinations or type your own below:",
        ["-- Type your own --", "Goa", "Pondicherry", "Andaman", "Manali", "Shimla", 
         "Darjeeling", "Ooty", "Munnar", "Delhi", "Agra", "Jaipur", "Udaipur", 
         "Mysore", "Varanasi", "Amritsar", "Hyderabad", "Kaziranga", "Rishikesh", 
         "Coorg", "Ranthambore", "Mumbai", "Bangalore", "Chennai", "Kolkata", "Ahmedabad"],
        label_visibility="collapsed"
    )
    
    if destination_option == "-- Type your own --":
        destination = st.text_input("Enter destination:", placeholder="e.g., Goa, Paris, Tokyo", label_visibility="collapsed")
    else:
        destination = destination_option

with col2:
    st.markdown("**💰 Budget (INR)**")
    budget_option = st.selectbox(
        "Choose a budget range or enter your own below:",
        ["-- Type your own --", "₹5,000 – ₹10,000", "₹11,000 – ₹15,000", 
         "₹16,000 – ₹20,000", "₹21,000 – ₹25,000", "₹25,000+"],
        label_visibility="collapsed"
    )
    
    if budget_option == "-- Type your own --":
        budget = st.text_input("Enter budget:", placeholder="e.g., ₹15,000 or $500", label_visibility="collapsed")
    else:
        budget = budget_option

with col3:
    travel_dates = st.date_input("🗓️ Travel Dates", [date.today(), date.today()])

# -----------------------------------------------------------
# 🗺️ Map Section (PyDeck)
# -----------------------------------------------------------
demo_locations = {
    "goa": [15.2993, 74.1240],
    "pondicherry": [11.9416, 79.8083],
    "andaman": [11.7401, 92.6586],
    "manali": [32.2432, 77.1892],
    "shimla": [31.1048, 77.1734],
    "darjeeling": [27.0410, 88.2663],
    "ooty": [11.4064, 76.6932],
    "munnar": [10.0889, 77.0595],
    "delhi": [28.6139, 77.2090],
    "agra": [27.1751, 78.0421],
    "jaipur": [26.9124, 75.7873],
    "udaipur": [24.5854, 73.7125],
    "mysore": [12.2958, 76.6394],
    "varanasi": [25.3176, 82.9739],
    "amritsar": [31.6340, 74.8723],
    "hyderabad": [17.3850, 78.4867],
    "kaziranga": [26.5775, 93.1711],
    "rishikesh": [30.0869, 78.2676],
    "coorg": [12.3375, 75.8069],
    "ranthambore": [26.0173, 76.5026],
    "mumbai": [19.0760, 72.8777],
    "bangalore": [12.9716, 77.5946],
    "chennai": [13.0827, 80.2707],
    "kolkata": [22.5726, 88.3639],
    "ahmedabad": [23.0225, 72.5714],
}

if destination:
    dest_key = destination.lower().strip()
    lat, lon = demo_locations.get(dest_key, [20.5937, 78.9629])  # fallback = India center

    st.subheader("🌍 Map View")

    map_view = pdk.Deck(
        map_style=map_style,
        initial_view_state=pdk.ViewState(latitude=lat, longitude=lon, zoom=9, pitch=40),
        layers=[
            pdk.Layer(
                "ScatterplotLayer",
                data=[{"lat": lat, "lon": lon}],
                get_position=["lon", "lat"],
                get_color=[255, 0, 0, 200],
                get_radius=600,
            )
        ],
    )
    st.pydeck_chart(map_view)

# -----------------------------------------------------------
# ✈️ Generate Itinerary (Gemini)
# -----------------------------------------------------------
if st.button("✨ Generate Itinerary"):
    if not api_key:
        st.error("Please enter your Gemini API key in the sidebar.")
    elif not destination or not budget or not travel_dates:
        st.error("Please fill in all fields before generating your itinerary.")
    else:
        st.info("⏳ Generating itinerary... Please wait.")
        try:
            prompt = f"""
            Create a detailed student-friendly travel itinerary for {destination}.
            Budget range: {budget}.
            Dates: {travel_dates}.
            Traveler name: {user_name or 'Anonymous'}.
            Travel preference: {travel_pref}.
            Include accommodation, local food, travel tips, and a day-by-day plan.
            """

            model = genai.GenerativeModel("gemini-pro")
            response = model.generate_content(prompt)

            st.success("✅ Your AI-generated itinerary:")
            st.markdown(response.text)

        except Exception as e:
            st.error(f"Error generating itinerary: {e}")